{"version":3,"sources":["deletePost.js"],"names":["postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","Post","model","handler","req","res","method","id","query","body","findById","post","status","json","findByIdAndDelete","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,OAAO,EAAEC,MAD0B;AAEnCC,EAAAA,SAAS,EAAEC,IAFwB;AAGnCC,EAAAA,QAAQ,EAAEH,MAHyB;AAInCI,EAAAA,SAAS,EAAEJ;AAJwB,CAApB,CAAnB;;AAMA,IAAMK,IAAI,GAAGR,qBAASS,KAAT,CAAe,MAAf,EAAuBV,UAAvB,CAAb;;AAEe,SAAeW,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBACPD,GAAG,CAACE,MAAJ,KAAe,QADR;AAAA;AAAA;AAAA;;AAECC,UAAAA,EAFD,GAEQH,GAAG,CAACI,KAFZ,CAECD,EAFD,EAEmB;;AAFnB,sBAGyBH,GAAG,CAACK,IAH7B,EAGCV,QAHD,aAGCA,QAHD,EAGWC,SAHX,aAGWA,SAHX;AAAA;AAAA;AAAA,0CAMG,4BANH;;AAAA;AAAA;AAAA,0CAOgBC,IAAI,CAACS,QAAL,CAAcH,EAAd,CAPhB;;AAAA;AAOGI,UAAAA,IAPH;;AAAA,cASEA,IATF;AAAA;AAAA;AAAA;;AAAA,2CAUQN,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAElB,YAAAA,OAAO,EAAE;AAAX,WAArB,CAVR;;AAAA;AAAA,gBAcCgB,IAAI,CAACZ,QAAL,KAAkBA,QAAlB,IAA8BY,IAAI,CAACX,SAAL,KAAmBA,SAdlD;AAAA;AAAA;AAAA;;AAAA,2CAeQK,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAElB,YAAAA,OAAO,EAAE;AAAX,WAArB,CAfR;;AAAA;AAAA;AAAA,0CAmBGM,IAAI,CAACa,iBAAL,CAAuBP,EAAvB,CAnBH;;AAAA;AAAA;AAAA,0CAsBG,yBAAc,eAAd,EAA+B;AAAEA,YAAAA,EAAE,EAAFA;AAAF,WAA/B,CAtBH;;AAAA;AAwBHF,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAElB,YAAAA,OAAO,EAAE;AAAX,WAArB;AAxBG;AAAA;;AAAA;AAAA;AAAA;AA0BHU,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBlB,YAAAA,OAAO,EAAE,qBADQ;AAEjBoB,YAAAA,KAAK,EAAE,YAAMpB;AAFI,WAArB;;AA1BG;AAAA;AAAA;;AAAA;AAgCPU,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAElB,YAAAA,OAAO,EAAE;AAAX,WAArB;;AAhCO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { connectToDatabase } from './utils/db';\r\nimport mongoose from 'mongoose';\r\nimport { publishToAbly } from './utils/ably';\r\n\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n});\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method === 'DELETE') {\r\n        const { id } = req.query; // Get the post ID from the URL\r\n        const { username, sessionId } = req.body;\r\n\r\n        try {\r\n            await connectToDatabase();\r\n            const post = await Post.findById(id);\r\n\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Ensure the user is allowed to delete this post (check username and sessionId)\r\n            if (post.username !== username || post.sessionId !== sessionId) {\r\n                return res.status(403).json({ message: 'You can only delete your own posts' });\r\n            }\r\n\r\n            // Delete the post\r\n            await Post.findByIdAndDelete(id);\r\n\r\n            // Notify Ably about the deleted post\r\n            await publishToAbly('deleteOpinion', { id });\r\n\r\n            res.status(200).json({ message: 'Post deleted successfully' });\r\n        } catch (error) {\r\n            res.status(500).json({\r\n                message: 'Error deleting post',\r\n                error: error.message,\r\n            });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"],"file":"deletePost.dev.js"}