{"version":3,"sources":["editPost.js"],"names":["_db","require","_mongoose","_interopRequireDefault","_ably","postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","Post","model","handler","req","res","id","_req$body","post","regeneratorRuntime","async","_context","prev","next","method","query","body","trim","abrupt","status","json","awrap","findById","sent","save","t0","error","stop"],"mappings":"4FAAA,IAAAA,IAAAC,QAAA,cACAC,UAAAC,uBAAAF,QAAA,aACAG,MAAAH,QAAA,wFAEA,IAAMI,WAAa,IAAIC,UAAAA,QAASC,OAAO,CACnCC,QAASC,OACTC,UAAWC,KANfC,SAAAH,OAQII,UAAWJ,SAETK,KAAOR,UAAAA,QAASS,MAAM,OAAQV,YAErB,SAAeW,QAAQC,EAAKC,GAA5B,IAAAC,EAAAC,EAAAZ,EAAAI,EAAAC,EAAAQ,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GACQ,QAAfT,EAAIU,OADG,CAAAH,EAAAE,KAAA,GAAA,MAAA,GAECP,EAAOF,EAAIW,MAAXT,GAFDC,EARwBH,EAAAY,KAAvBrB,EAQDY,EARCZ,QAAOF,EAQRc,EARQd,SAAAA,EAQRc,EARQd,UAERK,GAFwB,KAAAH,EAAAsB,OAQxB,CAAAN,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAO,OAAA,SARwBb,EAAAc,OAAA,KAAAC,KAAA,CAAAzB,QAAA,6BAQxB,KAAA,EAAA,OAAAgB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAY,OAFF5B,EAAAA,IAAAA,sBAEE,KAAA,EAAA,OAAAkB,EAAAE,KAAA,GAAAJ,mBAAAY,MAWgBpB,KAAKqB,SAAShB,IAX9B,KAAA,GAAA,GAWGE,EAXHG,EAAAY,KAAA,CAAAZ,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAO,OAAA,SAcQb,EAAIc,OAAO,KAAKC,KAAK,CAAEzB,QAAS,oBAdxC,KAAA,GAAA,GAAAa,EAAAT,WAAAA,GAAAS,EAAAR,YAAAA,EAAA,OAAAW,EAAAO,OAAA,SACHJ,EAAJK,OAAe,KADRC,KAAA,CAAAzB,QAAA,sCAAAgB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAuBHL,EAAKb,QAAUA,EAvBZa,EAEQJ,UAAW,IAAAN,KAFnBa,EAAAE,KAAA,GAAAJ,mBAAAY,MAyBGb,EAAKgB,QAzBR,KAAA,GAAA,OAAAb,EAAAE,KAAA,GAAAJ,mBAAAY,OAKF1B,EAAAA,MAAAA,eAAWA,cAAmBa,IAL5B,KAAA,GAAAH,EAAAc,OAAA,KAAAC,KAAAZ,GAAAG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,MAAA,GAgCHN,EAAIc,OAAO,KAAKC,KAAK,CAAEzB,QAAS,sBAAuB+B,MAAKf,EAAAc,KAhCzD,KAAA,GAAAd,EAAAE,KAAA,GAAA,MAAA,KAAA,GAMyBR,EANzBc,OAAA,KAAAC,KAAA,CAAAzB,QAAA,uBAAA,KAAA,GAAA,IAAA,MAAA,OAAAgB,EAAAgB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"editPost.min.js","sourcesContent":["import { connectToDatabase } from './utils/db';\r\nimport mongoose from 'mongoose';\r\nimport { publishToAbly } from './utils/ably';\r\n\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n});\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method === 'PUT') {\r\n        const { id } = req.query; // Get the post ID from the URL\r\n        const { message, username, sessionId } = req.body;\r\n\r\n        if (!message || message.trim() === '') {\r\n            return res.status(400).json({ message: 'Message cannot be empty' });\r\n        }\r\n\r\n        try {\r\n            await connectToDatabase();\r\n            const post = await Post.findById(id);\r\n\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Ensure the user is allowed to edit this post (check username and sessionId)\r\n            if (post.username !== username || post.sessionId !== sessionId) {\r\n                return res.status(403).json({ message: 'You can only edit your own posts' });\r\n            }\r\n\r\n            // Update the post\r\n            post.message = message;\r\n            post.timestamp = new Date();\r\n            await post.save();\r\n\r\n            // Publish the edited post to Ably\r\n            await publishToAbly('editOpinion', post);\r\n\r\n            res.status(200).json(post);\r\n        } catch (error) {\r\n            res.status(500).json({ message: 'Error updating post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"]}