{"version":3,"sources":["postOpinion.js"],"names":["_db","require","_mongoose","_interopRequireDefault","_ably","postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","Post","model","handler","req","res","_req$body","newPost","regeneratorRuntime","async","_context","prev","next","method","body","abrupt","status","json","awrap","connectToDatabase","save","publishToAbly","t0","error","stop"],"mappings":"4FAAA,IAAAA,IAAAC,QAAA,kBACAC,UAAAC,uBAAAF,QAAA,aACAG,MAAAH,QAAA,4FAEA,IAAMI,WAAa,IAAIC,UAAAA,QAASC,OAAO,CACnCC,QAASC,OACTC,UAAWC,KANfC,SAAAH,OAQII,UAAWJ,SAETK,KAAOR,UAAAA,QAASS,MAAM,OAAQV,YAErB,SAAeW,QAAQC,EAAKC,GAA5B,IAAAC,EAAAX,EAAAI,EAAAC,EAAAO,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GACQ,SAAfR,EAAIS,OADG,CAAAH,EAAAE,KAAA,GAAA,MAAA,GAAAN,EAEkCF,EAAIU,KAArCnB,EAFDW,EAECX,QAASI,EAFVO,EAEUP,SAAUC,EAFpBM,EAEoBN,UAV7BR,GAA0BE,KAATD,EAAAA,OAQR,CAAAiB,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SARwBV,EAAAW,OAAA,KAAAC,KAAA,CAAAtB,QAAA,6BAQxB,KAAA,EAAA,GALDC,GAHyBI,EAQxB,CAAAU,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SAJAnB,EAAAA,OAAAA,KAAAA,KAAAA,CAAAA,QAAAA,yCAIA,KAAA,EAAA,OAAAc,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAU,OAWG,EAAA/B,IAAAgC,sBAXH,KAAA,EAAA,OAAuBf,EAAvB,IAAAH,KAAA,CAAAN,QAAAA,EAAAE,UAAA,IAAAC,KAAAC,SAAAA,EAAAC,UAAAA,IAAAU,EAAAE,KAAA,GAAAJ,mBAAAU,MAAAX,EAAAa,QAAA,KAAA,GAAA,OAAAV,EAAAE,KAAA,GAAAJ,mBAAAU,OAAA,EAAA3B,MAAA8B,eAAA,aAAAd,IAAA,KAAA,GAAAF,EAAAW,OAAA,KAAAC,KAAAV,GAAAG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,MAAA,GAAAL,EAAAW,OAAA,KAAAC,KAAA,CAAAtB,QAAA,oBAAA4B,MAAAb,EAAAY,KAAA,KAAA,GAAAZ,EAAAE,KAAA,GAAA,MAAA,KAAA,GAuBPP,EAAIW,OAAO,KAAKC,KAAK,CAAEtB,QAAS,uBAvBzB,KAAA,GAAA,IAAA,MAAA,OAAAe,EAAAc,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"postOpinion.min.js","sourcesContent":["import { connectToDatabase } from '../../utils/db';\r\nimport mongoose from 'mongoose';\r\nimport { publishToAbly } from '../../utils/ably';\r\n\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n});\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method === 'POST') {\r\n        const { message, username, sessionId } = req.body;\r\n        if (!message || message.trim() === '') {\r\n            return res.status(400).json({ message: 'Message cannot be empty' });\r\n        }\r\n        if (!username || !sessionId) {\r\n            return res.status(400).json({ message: 'Username and sessionId are required' });\r\n        }\r\n\r\n        try {\r\n            await connectToDatabase();\r\n            const newPost = new Post({ message, timestamp: new Date(), username, sessionId });\r\n            await newPost.save();\r\n\r\n            // Publish to Ably\r\n            await publishToAbly('newOpinion', newPost);\r\n\r\n            res.status(201).json(newPost);\r\n        } catch (error) {\r\n            res.status(500).json({ message: 'Error saving post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"]}