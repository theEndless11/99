{"version":3,"sources":["deletePost.js"],"names":["_db","require","_mongoose","_interopRequireDefault","_ably","postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","Post","model","handler","req","res","id","_req$body","post","regeneratorRuntime","async","_context","prev","next","method","query","awrap","connectToDatabase","sent","abrupt","json","status","publishToAbly","t0","body","error","stop"],"mappings":"4FAAA,IAAAA,IAAAC,QAAA,cACAC,UAAAC,uBAAAF,QAAA,aACAG,MAAAH,QAAA,wFAEA,IAAMI,WAAa,IAAIC,UAAAA,QAASC,OAAO,CACnCC,QAASC,OACTC,UAAWC,KANfC,SAAAH,OAQII,UAAWJ,SAETK,KAAOR,UAAAA,QAASS,MAAM,OAAQV,YAErB,SAAeW,QAAQC,EAAKC,GAA5B,IAAAC,EAAAC,EAAAR,EAAAC,EAAAQ,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GACQ,WAAfT,EAAIU,OADG,OAECR,EAAOF,EAAIW,MAAXT,GAFDC,EARQd,EAASC,KAAhBK,EAQDQ,EARCR,SAAON,EAQRc,EARQd,UAQRkB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAO,OARwB,EAAA7B,IAAA8B,sBAQxBN,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAO,MAJApB,KAAAA,SAAAA,IAIA,KAAA,EAAA,GAJAA,EAIAe,EAAAO,KAAA,CAAAP,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAQ,OAAA,SAFF1B,EAAAA,OAASS,KAAMkB,KAAf,CAAuB5B,QAAAA,oBAErB,KAAA,GAAA,GAcCgB,EAAKT,WAAaA,GAAYS,EAAKR,YAAcA,EAdlD,OAAAW,EAAAQ,OAAA,SAAAd,EAAAgB,OAAA,KAAAD,KAAA,CAAAzB,QAAA,wCAAAgB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAO,MACPZ,KAAIU,kBADGR,IAAA,KAAA,GAAA,OAAAK,EAAAE,KAAA,GAAAJ,mBAAAO,OAAA,EAAAzB,MAAA+B,eAAA,gBAAA,CAAAhB,GAAAA,KAAA,KAAA,GAAAD,EAEQD,OAAIW,KAFZK,KAEmB,CAAAzB,QAAA,8BAFnBgB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,MAAA,GAAAN,EAAAgB,OAGyBjB,KAAIoB,KAA5BzB,CAHDJ,QAAA,sBAAA8B,MAAAd,EAAAY,GAAA5B,UAAA,KAAA,GAAAgB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAR,EAAAgB,OAAA,KAAAD,KAAA,CAAAzB,QAAA,uBAAA,KAAA,GAAA,IAAA,MAAA,OAAAgB,EAAAe,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"deletePost.min.js","sourcesContent":["import { connectToDatabase } from './utils/db';\r\nimport mongoose from 'mongoose';\r\nimport { publishToAbly } from './utils/ably';\r\n\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n});\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method === 'DELETE') {\r\n        const { id } = req.query; // Get the post ID from the URL\r\n        const { username, sessionId } = req.body;\r\n\r\n        try {\r\n            await connectToDatabase();\r\n            const post = await Post.findById(id);\r\n\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Ensure the user is allowed to delete this post (check username and sessionId)\r\n            if (post.username !== username || post.sessionId !== sessionId) {\r\n                return res.status(403).json({ message: 'You can only delete your own posts' });\r\n            }\r\n\r\n            // Delete the post\r\n            await Post.findByIdAndDelete(id);\r\n\r\n            // Notify Ably about the deleted post\r\n            await publishToAbly('deleteOpinion', { id });\r\n\r\n            res.status(200).json({ message: 'Post deleted successfully' });\r\n        } catch (error) {\r\n            res.status(500).json({\r\n                message: 'Error deleting post',\r\n                error: error.message,\r\n            });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"]}