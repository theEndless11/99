{"version":3,"sources":["editPost.js"],"names":["postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","Post","model","handler","req","res","method","id","query","body","trim","status","json","findById","post","save","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,OAAO,EAAEC,MAD0B;AAEnCC,EAAAA,SAAS,EAAEC,IAFwB;AAGnCC,EAAAA,QAAQ,EAAEH,MAHyB;AAInCI,EAAAA,SAAS,EAAEJ;AAJwB,CAApB,CAAnB;;AAMA,IAAMK,IAAI,GAAGR,qBAASS,KAAT,CAAe,MAAf,EAAuBV,UAAvB,CAAb;;AAEe,SAAeW,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBACPD,GAAG,CAACE,MAAJ,KAAe,KADR;AAAA;AAAA;AAAA;;AAECC,UAAAA,EAFD,GAEQH,GAAG,CAACI,KAFZ,CAECD,EAFD,EAEmB;;AAFnB,sBAGkCH,GAAG,CAACK,IAHtC,EAGCd,OAHD,aAGCA,OAHD,EAGUI,QAHV,aAGUA,QAHV,EAGoBC,SAHpB,aAGoBA,SAHpB;;AAAA,gBAKH,CAACL,OAAD,IAAYA,OAAO,CAACe,IAAR,OAAmB,EAL5B;AAAA;AAAA;AAAA;;AAAA,2CAMIL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEjB,YAAAA,OAAO,EAAE;AAAX,WAArB,CANJ;;AAAA;AAAA;AAAA;AAAA,0CAUG,4BAVH;;AAAA;AAAA;AAAA,0CAWgBM,IAAI,CAACY,QAAL,CAAcN,EAAd,CAXhB;;AAAA;AAWGO,UAAAA,IAXH;;AAAA,cAaEA,IAbF;AAAA;AAAA;AAAA;;AAAA,2CAcQT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEjB,YAAAA,OAAO,EAAE;AAAX,WAArB,CAdR;;AAAA;AAAA,gBAkBCmB,IAAI,CAACf,QAAL,KAAkBA,QAAlB,IAA8Be,IAAI,CAACd,SAAL,KAAmBA,SAlBlD;AAAA;AAAA;AAAA;;AAAA,2CAmBQK,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEjB,YAAAA,OAAO,EAAE;AAAX,WAArB,CAnBR;;AAAA;AAsBH;AACAmB,UAAAA,IAAI,CAACnB,OAAL,GAAeA,OAAf;AACAmB,UAAAA,IAAI,CAACjB,SAAL,GAAiB,IAAIC,IAAJ,EAAjB;AAxBG;AAAA,0CAyBGgB,IAAI,CAACC,IAAL,EAzBH;;AAAA;AAAA;AAAA,0CA4BG,yBAAc,aAAd,EAA6BD,IAA7B,CA5BH;;AAAA;AA8BHT,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,IAArB;AA9BG;AAAA;;AAAA;AAAA;AAAA;AAgCHT,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEjB,YAAAA,OAAO,EAAE,qBAAX;AAAkCqB,YAAAA,KAAK;AAAvC,WAArB;;AAhCG;AAAA;AAAA;;AAAA;AAmCPX,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEjB,YAAAA,OAAO,EAAE;AAAX,WAArB;;AAnCO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { connectToDatabase } from './utils/db';\r\nimport mongoose from 'mongoose';\r\nimport { publishToAbly } from './utils/ably';\r\n\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n});\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method === 'PUT') {\r\n        const { id } = req.query; // Get the post ID from the URL\r\n        const { message, username, sessionId } = req.body;\r\n\r\n        if (!message || message.trim() === '') {\r\n            return res.status(400).json({ message: 'Message cannot be empty' });\r\n        }\r\n\r\n        try {\r\n            await connectToDatabase();\r\n            const post = await Post.findById(id);\r\n\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Ensure the user is allowed to edit this post (check username and sessionId)\r\n            if (post.username !== username || post.sessionId !== sessionId) {\r\n                return res.status(403).json({ message: 'You can only edit your own posts' });\r\n            }\r\n\r\n            // Update the post\r\n            post.message = message;\r\n            post.timestamp = new Date();\r\n            await post.save();\r\n\r\n            // Publish the edited post to Ably\r\n            await publishToAbly('editOpinion', post);\r\n\r\n            res.status(200).json(post);\r\n        } catch (error) {\r\n            res.status(500).json({ message: 'Error updating post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"],"file":"editPost.dev.js"}