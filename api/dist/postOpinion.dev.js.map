{"version":3,"sources":["postOpinion.js"],"names":["postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","Post","model","handler","req","res","method","body","trim","status","json","newPost","save","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,OAAO,EAAEC,MAD0B;AAEnCC,EAAAA,SAAS,EAAEC,IAFwB;AAGnCC,EAAAA,QAAQ,EAAEH,MAHyB;AAInCI,EAAAA,SAAS,EAAEJ;AAJwB,CAApB,CAAnB;;AAMA,IAAMK,IAAI,GAAGR,qBAASS,KAAT,CAAe,MAAf,EAAuBV,UAAvB,CAAb;;AAEe,SAAeW,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBACPD,GAAG,CAACE,MAAJ,KAAe,MADR;AAAA;AAAA;AAAA;;AAAA,sBAEkCF,GAAG,CAACG,IAFtC,EAECZ,OAFD,aAECA,OAFD,EAEUI,QAFV,aAEUA,QAFV,EAEoBC,SAFpB,aAEoBA,SAFpB;;AAAA,gBAGH,CAACL,OAAD,IAAYA,OAAO,CAACa,IAAR,OAAmB,EAH5B;AAAA;AAAA;AAAA;;AAAA,2CAIIH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEf,YAAAA,OAAO,EAAE;AAAX,WAArB,CAJJ;;AAAA;AAAA,gBAMH,CAACI,QAAD,IAAa,CAACC,SANX;AAAA;AAAA;AAAA;;AAAA,2CAOIK,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEf,YAAAA,OAAO,EAAE;AAAX,WAArB,CAPJ;;AAAA;AAAA;AAAA;AAAA,0CAWG,4BAXH;;AAAA;AAYGgB,UAAAA,OAZH,GAYa,IAAIV,IAAJ,CAAS;AAAEN,YAAAA,OAAO,EAAPA,OAAF;AAAWE,YAAAA,SAAS,EAAE,IAAIC,IAAJ,EAAtB;AAAkCC,YAAAA,QAAQ,EAARA,QAAlC;AAA4CC,YAAAA,SAAS,EAATA;AAA5C,WAAT,CAZb;AAAA;AAAA,0CAaGW,OAAO,CAACC,IAAR,EAbH;;AAAA;AAAA;AAAA,0CAgBG,yBAAc,YAAd,EAA4BD,OAA5B,CAhBH;;AAAA;AAkBHN,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,OAArB;AAlBG;AAAA;;AAAA;AAAA;AAAA;AAoBHN,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEf,YAAAA,OAAO,EAAE,mBAAX;AAAgCkB,YAAAA,KAAK;AAArC,WAArB;;AApBG;AAAA;AAAA;;AAAA;AAuBPR,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEf,YAAAA,OAAO,EAAE;AAAX,WAArB;;AAvBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { connectToDatabase } from '../../utils/db';\r\nimport mongoose from 'mongoose';\r\nimport { publishToAbly } from '../../utils/ably';\r\n\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n});\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method === 'POST') {\r\n        const { message, username, sessionId } = req.body;\r\n        if (!message || message.trim() === '') {\r\n            return res.status(400).json({ message: 'Message cannot be empty' });\r\n        }\r\n        if (!username || !sessionId) {\r\n            return res.status(400).json({ message: 'Username and sessionId are required' });\r\n        }\r\n\r\n        try {\r\n            await connectToDatabase();\r\n            const newPost = new Post({ message, timestamp: new Date(), username, sessionId });\r\n            await newPost.save();\r\n\r\n            // Publish to Ably\r\n            await publishToAbly('newOpinion', newPost);\r\n\r\n            res.status(201).json(newPost);\r\n        } catch (error) {\r\n            res.status(500).json({ message: 'Error saving post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"],"file":"postOpinion.dev.js"}